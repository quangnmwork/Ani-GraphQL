name: Check MR is valid & Push image

on: 
   push:
    branches:
      - "master"

env:
  ECS_TASK_DEFINITION: .github/workflows/task-definition.json      # set this to the path to your Amazon ECS task definition                                           # file, e.g. .aws/task-definition.json
  ECS_SERVICE: anideploy                # set this to your Amazon ECS service name
  ECS_CLUSTER: ani_cluster

jobs:
  build:
    runs-on: ubuntu-latest
    if:  (!(github.event.action == 'closed' && github.event.pull_request.merged != true))
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '16.19.1'
      - run: npm i -g yarn
      - run: yarn
      - run: yarn build

  push-ecr:
    name: Push docker image 
    runs-on: "ubuntu-latest"
    needs: build
    if: github.event.pull_request.merged == true && github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ani-app
          IMAGE_TAG: ${{ github.sha }}

        run: |
          echo $REGISTRY
          docker build -t $REGISTRY/$REPOSITORY .
          docker tag $REGISTRY/$REPOSITORY $REGISTRY/$REPOSITORY:$IMAGE_TAG && docker tag $REGISTRY/$REPOSITORY $REGISTRY/$REPOSITORY:latest
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          aws ecr batch-delete-image --repository-name $REPOSITORY --image-ids imageTag=latest
          docker push $REGISTRY/$REPOSITORY:latest
          
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_CONTAINER_DEFINITION }} \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true